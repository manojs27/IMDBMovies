// Generated by Dagger (https://google.github.io/dagger).
package com.manoj.movies.movielist.model;

import com.manoj.movies.movielist.presenter.MainPresenter;
import com.manoj.movies.movielist.view.MainView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MovieListModule_ProvidePresenterFactory implements Factory<MainPresenter> {
  private final MovieListModule module;

  private final Provider<MovieListModel> modelProvider;

  private final Provider<MainView> viewProvider;

  public MovieListModule_ProvidePresenterFactory(
      MovieListModule module,
      Provider<MovieListModel> modelProvider,
      Provider<MainView> viewProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
    this.viewProvider = viewProvider;
  }

  @Override
  public MainPresenter get() {
    return Preconditions.checkNotNull(
        module.providePresenter(modelProvider.get(), viewProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MovieListModule_ProvidePresenterFactory create(
      MovieListModule module,
      Provider<MovieListModel> modelProvider,
      Provider<MainView> viewProvider) {
    return new MovieListModule_ProvidePresenterFactory(module, modelProvider, viewProvider);
  }

  public static MainPresenter proxyProvidePresenter(
      MovieListModule instance, MovieListModel model, MainView view) {
    return Preconditions.checkNotNull(
        instance.providePresenter(model, view),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
