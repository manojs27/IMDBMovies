// Generated by Dagger (https://google.github.io/dagger).
package com.manoj.movies.moviedetails.model;

import com.manoj.movies.moviedetails.MovieDetailsActivity;
import com.manoj.movies.moviedetails.view.MovieDetailsView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MovieDetailsModule_ProvideMovieDetailsViewFactory
    implements Factory<MovieDetailsView> {
  private final MovieDetailsModule module;

  private final Provider<MovieDetailsActivity> activityProvider;

  public MovieDetailsModule_ProvideMovieDetailsViewFactory(
      MovieDetailsModule module, Provider<MovieDetailsActivity> activityProvider) {
    this.module = module;
    this.activityProvider = activityProvider;
  }

  @Override
  public MovieDetailsView get() {
    return Preconditions.checkNotNull(
        module.provideMovieDetailsView(activityProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MovieDetailsModule_ProvideMovieDetailsViewFactory create(
      MovieDetailsModule module, Provider<MovieDetailsActivity> activityProvider) {
    return new MovieDetailsModule_ProvideMovieDetailsViewFactory(module, activityProvider);
  }

  public static MovieDetailsView proxyProvideMovieDetailsView(
      MovieDetailsModule instance, MovieDetailsActivity activity) {
    return Preconditions.checkNotNull(
        instance.provideMovieDetailsView(activity),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
