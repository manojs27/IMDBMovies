// Generated by Dagger (https://google.github.io/dagger).
package com.manoj.movies.moviedetails.model;

import com.manoj.movies.moviedetails.MovieDetailsActivity;
import com.manoj.movies.roomDatabase.UserMovie;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MovieDetailsModule_ProvideUserMovieFactory implements Factory<UserMovie> {
  private final MovieDetailsModule module;

  private final Provider<MovieDetailsActivity> activityProvider;

  public MovieDetailsModule_ProvideUserMovieFactory(
      MovieDetailsModule module, Provider<MovieDetailsActivity> activityProvider) {
    this.module = module;
    this.activityProvider = activityProvider;
  }

  @Override
  public UserMovie get() {
    return Preconditions.checkNotNull(
        module.provideUserMovie(activityProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MovieDetailsModule_ProvideUserMovieFactory create(
      MovieDetailsModule module, Provider<MovieDetailsActivity> activityProvider) {
    return new MovieDetailsModule_ProvideUserMovieFactory(module, activityProvider);
  }

  public static UserMovie proxyProvideUserMovie(
      MovieDetailsModule instance, MovieDetailsActivity activity) {
    return Preconditions.checkNotNull(
        instance.provideUserMovie(activity),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
