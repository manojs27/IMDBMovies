// Generated by Dagger (https://google.github.io/dagger).
package com.manoj.movies.movielist.model;

import com.manoj.movies.network.MoviesClient;
import com.manoj.movies.roomDatabase.MoviesDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MovieListModule_ProvideModelFactory implements Factory<MovieListModel> {
  private final MovieListModule module;

  private final Provider<MoviesDatabase> databaseProvider;

  private final Provider<MoviesClient> clientProvider;

  public MovieListModule_ProvideModelFactory(
      MovieListModule module,
      Provider<MoviesDatabase> databaseProvider,
      Provider<MoviesClient> clientProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public MovieListModel get() {
    return Preconditions.checkNotNull(
        module.provideModel(databaseProvider.get(), clientProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MovieListModule_ProvideModelFactory create(
      MovieListModule module,
      Provider<MoviesDatabase> databaseProvider,
      Provider<MoviesClient> clientProvider) {
    return new MovieListModule_ProvideModelFactory(module, databaseProvider, clientProvider);
  }

  public static MovieListModel proxyProvideModel(
      MovieListModule instance, MoviesDatabase database, MoviesClient client) {
    return Preconditions.checkNotNull(
        instance.provideModel(database, client),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
