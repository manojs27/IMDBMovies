// Generated by Dagger (https://google.github.io/dagger).
package com.manoj.movies.moviedetails.model;

import com.manoj.movies.roomDatabase.MoviesDatabase;
import com.manoj.movies.roomDatabase.UserMovie;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MovieDetailsModule_ProvideMovieDetailsModelFactory
    implements Factory<MovieDetailsModel> {
  private final MovieDetailsModule module;

  private final Provider<MoviesDatabase> databaseProvider;

  private final Provider<UserMovie> userMovieProvider;

  public MovieDetailsModule_ProvideMovieDetailsModelFactory(
      MovieDetailsModule module,
      Provider<MoviesDatabase> databaseProvider,
      Provider<UserMovie> userMovieProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
    this.userMovieProvider = userMovieProvider;
  }

  @Override
  public MovieDetailsModel get() {
    return Preconditions.checkNotNull(
        module.provideMovieDetailsModel(databaseProvider.get(), userMovieProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MovieDetailsModule_ProvideMovieDetailsModelFactory create(
      MovieDetailsModule module,
      Provider<MoviesDatabase> databaseProvider,
      Provider<UserMovie> userMovieProvider) {
    return new MovieDetailsModule_ProvideMovieDetailsModelFactory(
        module, databaseProvider, userMovieProvider);
  }

  public static MovieDetailsModel proxyProvideMovieDetailsModel(
      MovieDetailsModule instance, MoviesDatabase database, UserMovie userMovie) {
    return Preconditions.checkNotNull(
        instance.provideMovieDetailsModel(database, userMovie),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
