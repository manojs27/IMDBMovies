// Generated by Dagger (https://google.github.io/dagger).
package com.manoj.movies.startApp;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import com.manoj.movies.moviedetails.MovieDetailsActivity;
import com.manoj.movies.moviedetails.MovieDetailsActivity_MembersInjector;
import com.manoj.movies.moviedetails.model.MovieDetailsModel;
import com.manoj.movies.moviedetails.model.MovieDetailsModule;
import com.manoj.movies.moviedetails.model.MovieDetailsModule_ProvideMovieDetailsModelFactory;
import com.manoj.movies.moviedetails.model.MovieDetailsModule_ProvideMovieDetailsPresenterFactory;
import com.manoj.movies.moviedetails.model.MovieDetailsModule_ProvideMovieDetailsViewFactory;
import com.manoj.movies.moviedetails.model.MovieDetailsModule_ProvideUserMovieFactory;
import com.manoj.movies.moviedetails.presenter.MovieDetailsPresenter;
import com.manoj.movies.moviedetails.view.MovieDetailsView;
import com.manoj.movies.movielist.MainActivity;
import com.manoj.movies.movielist.MainActivity_MembersInjector;
import com.manoj.movies.movielist.model.MovieListModel;
import com.manoj.movies.movielist.model.MovieListModule;
import com.manoj.movies.movielist.model.MovieListModule_ProvideModelFactory;
import com.manoj.movies.movielist.model.MovieListModule_ProvidePresenterFactory;
import com.manoj.movies.movielist.model.MovieListModule_ProvideViewFactory;
import com.manoj.movies.movielist.presenter.MainPresenter;
import com.manoj.movies.movielist.view.MainView;
import com.manoj.movies.network.ApiModule;
import com.manoj.movies.network.ApiModule_ProvideMoviesClientFactory;
import com.manoj.movies.network.MoviesClient;
import com.manoj.movies.roomDatabase.DatabaseModule;
import com.manoj.movies.roomDatabase.DatabaseModule_ProvideMoviesDatabaseFactory;
import com.manoj.movies.roomDatabase.MoviesDatabase;
import com.manoj.movies.roomDatabase.UserMovie;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_BindMovieDetailsActivity.MovieDetailsActivitySubcomponent.Builder>
      movieDetailsActivitySubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<MoviesDatabase> provideMoviesDatabaseProvider;

  private Provider<MoviesClient> provideMoviesClientProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(MovieDetailsActivity.class, (Provider) movieDetailsActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.movieDetailsActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindMovieDetailsActivity.MovieDetailsActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindMovieDetailsActivity.MovieDetailsActivitySubcomponent.Builder
              get() {
            return new MovieDetailsActivitySubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideContextProvider =
        DoubleCheck.provider(
            AppModule_ProvideContextFactory.create(builder.appModule, applicationProvider));
    this.provideMoviesDatabaseProvider =
        DoubleCheck.provider(
            DatabaseModule_ProvideMoviesDatabaseFactory.create(
                builder.databaseModule, provideContextProvider));
    this.provideMoviesClientProvider =
        DoubleCheck.provider(ApiModule_ProvideMoviesClientFactory.create(builder.apiModule));
  }

  @Override
  public void inject(MoviesApp app) {
    injectMoviesApp(app);
  }

  private MoviesApp injectMoviesApp(MoviesApp instance) {
    MoviesApp_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private DatabaseModule databaseModule;

    private ApiModule apiModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder {
    private MovieListModule movieListModule;

    private MainActivity seedInstance;

    @Override
    public ActivityBuilder_BindMainActivity.MainActivitySubcomponent build() {
      if (movieListModule == null) {
        this.movieListModule = new MovieListModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilder_BindMainActivity.MainActivitySubcomponent {
    private Provider<MovieListModel> provideModelProvider;

    private Provider<MainActivity> seedInstanceProvider;

    private Provider<MainView> provideViewProvider;

    private Provider<MainPresenter> providePresenterProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.provideModelProvider =
          DoubleCheck.provider(
              MovieListModule_ProvideModelFactory.create(
                  builder.movieListModule,
                  DaggerAppComponent.this.provideMoviesDatabaseProvider,
                  DaggerAppComponent.this.provideMoviesClientProvider));
      this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
      this.provideViewProvider =
          DoubleCheck.provider(
              MovieListModule_ProvideViewFactory.create(
                  builder.movieListModule, seedInstanceProvider));
      this.providePresenterProvider =
          DoubleCheck.provider(
              MovieListModule_ProvidePresenterFactory.create(
                  builder.movieListModule, provideModelProvider, provideViewProvider));
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectPresenter(instance, providePresenterProvider.get());
      return instance;
    }
  }

  private final class MovieDetailsActivitySubcomponentBuilder
      extends ActivityBuilder_BindMovieDetailsActivity.MovieDetailsActivitySubcomponent.Builder {
    private MovieDetailsModule movieDetailsModule;

    private MovieDetailsActivity seedInstance;

    @Override
    public ActivityBuilder_BindMovieDetailsActivity.MovieDetailsActivitySubcomponent build() {
      if (movieDetailsModule == null) {
        this.movieDetailsModule = new MovieDetailsModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            MovieDetailsActivity.class.getCanonicalName() + " must be set");
      }
      return new MovieDetailsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MovieDetailsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MovieDetailsActivitySubcomponentImpl
      implements ActivityBuilder_BindMovieDetailsActivity.MovieDetailsActivitySubcomponent {
    private Provider<MovieDetailsActivity> seedInstanceProvider;

    private Provider<MovieDetailsView> provideMovieDetailsViewProvider;

    private Provider<UserMovie> provideUserMovieProvider;

    private Provider<MovieDetailsModel> provideMovieDetailsModelProvider;

    private Provider<MovieDetailsPresenter> provideMovieDetailsPresenterProvider;

    private MovieDetailsActivitySubcomponentImpl(MovieDetailsActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MovieDetailsActivitySubcomponentBuilder builder) {
      this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
      this.provideMovieDetailsViewProvider =
          DoubleCheck.provider(
              MovieDetailsModule_ProvideMovieDetailsViewFactory.create(
                  builder.movieDetailsModule, seedInstanceProvider));
      this.provideUserMovieProvider =
          DoubleCheck.provider(
              MovieDetailsModule_ProvideUserMovieFactory.create(
                  builder.movieDetailsModule, seedInstanceProvider));
      this.provideMovieDetailsModelProvider =
          DoubleCheck.provider(
              MovieDetailsModule_ProvideMovieDetailsModelFactory.create(
                  builder.movieDetailsModule,
                  DaggerAppComponent.this.provideMoviesDatabaseProvider,
                  provideUserMovieProvider));
      this.provideMovieDetailsPresenterProvider =
          DoubleCheck.provider(
              MovieDetailsModule_ProvideMovieDetailsPresenterFactory.create(
                  builder.movieDetailsModule,
                  provideMovieDetailsModelProvider,
                  provideMovieDetailsViewProvider));
    }

    @Override
    public void inject(MovieDetailsActivity arg0) {
      injectMovieDetailsActivity(arg0);
    }

    private MovieDetailsActivity injectMovieDetailsActivity(MovieDetailsActivity instance) {
      MovieDetailsActivity_MembersInjector.injectView(
          instance, provideMovieDetailsViewProvider.get());
      MovieDetailsActivity_MembersInjector.injectPresenter(
          instance, provideMovieDetailsPresenterProvider.get());
      return instance;
    }
  }
}
